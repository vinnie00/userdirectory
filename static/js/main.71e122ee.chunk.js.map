{"version":3,"sources":["logo.svg","components/nav.js","util/api.js","components/dataArea.js","components/jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","Form","FormGroup","Label","for","Input","type","name","id","placeholder","onChange","e","inputChange","axios","get","DataArea","useState","users","personInfo","setpersonalInfo","useEffect","API","then","dataReturn","data","results","filteredUsers","filter","target","value","tempUserState","filteredList","item","Object","values","join","toLowerCase","indexOf","width","map","key","undefined","login","picture","phone","email","dob","uuid","data-th","src","medium","first","last","date","Jumbo","Jumbotron","fluid","Container","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,6JCoB5BC,EAjBH,SAACC,GACX,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBAAX,UACA,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,SACLC,GAAG,gBACHC,YAAY,qBACZC,SAAU,SAACC,GAAOX,EAAMY,YAAYD,S,iBCZ/B,EAEH,WACR,OAAOE,IAAMC,IAAI,kDCyENC,EAzEE,WAAO,IAAD,EACiBC,mBAAS,CAACC,MAAO,KADlC,mBACdC,EADc,KACFC,EADE,KAErBC,qBAAU,WACRC,IAAeC,MAAK,SAACC,GACnBJ,EAAgB,CACdF,MAAOM,EAAWC,KAAKC,QACvBC,cAAeH,EAAWC,KAAKC,eAGlC,IAoBH,OACE,6BACE,kBAAC,EAAD,CAAKb,YArBW,SAACD,GACnB,IAAMgB,EAAShB,EAAEiB,OAAOC,MAClBC,EAAgBZ,EAAWD,MAC3Bc,EAAeb,EAAWD,MAAMU,QAAO,SAACK,GAE5C,OAAiD,IADpCC,OAAOC,OAAOF,GAAMG,KAAK,IAAIC,cAC5BC,QAAQV,EAAOS,kBAE/BjB,EAAgB,CAAEO,cAAeK,EAAcd,MAAOa,OAepD,+BACE,+BACE,4BAfS,CACf,CACEvB,KAAM,QACN+B,MAAO,OAET,CAAE/B,KAAM,OAAQ+B,MAAO,OACvB,CAAE/B,KAAM,QAAS+B,MAAO,OACxB,CAAC/B,KAAM,QAAS+B,MAAO,OACvB,CAAC/B,KAAM,MAAO+B,MAAO,QAQDC,KAAI,YAAoB,IAAlBhC,EAAiB,EAAjBA,KAAiB,EAAX+B,MAClB,OACI,wBAAIE,IAAKjC,GACJA,QAMnB,oCAC6BkC,IAAxBvB,EAAWD,MAAM,SAAiDwB,IAA7BvB,EAAWD,MAAM,GAAGV,KACtDW,EAAWQ,cAAca,KAAI,YAAgD,IAA9CG,EAA6C,EAA7CA,MAAOnC,EAAsC,EAAtCA,KAAMoC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC/D,OACI,wBAAIN,IAAOE,EAAMK,MACb,wBAAIC,UAAU,SACV,yBAAKC,IAAKN,EAAQO,UAEtB,4BACK3C,EAAK4C,MADV,IACkB5C,EAAK6C,MAEvB,4BACKR,GAEL,4BACKC,GAEL,4BACKC,EAAIO,UAKrB,yC,gBCvDDC,EAbD,SAACtD,GACb,OACE,6BACE,kBAACuD,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAWD,OAAK,GACd,wBAAIE,UAAU,aAAd,mBACA,uBAAGA,UAAU,QAAb,6FCMKC,MATf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71e122ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst Nav = (props) => {\n  return (\n    <Form>\n      <FormGroup>\n        <Label for=\"exampleSearch\">Search</Label>\n        <Input\n          type=\"search\"\n          name=\"search\"\n          id=\"exampleSearch\"\n          placeholder=\"search placeholder\"\n          onChange={(e) => {props.inputChange(e)}}\n        />\n      </FormGroup>\n    </Form>\n  );\n}\n\nexport default Nav;","import axios from \"axios\";\nexport default {\n  // Gets all users\n  getUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};","import React, { useState, useEffect } from \"react\";\nimport Nav from \"./nav\";\nimport API from \"../util/api\";\n\nconst DataArea = () => {\n  const [personInfo, setpersonalInfo] = useState({users: \"\"});\n  useEffect(() => {\n    API.getUsers().then((dataReturn) => {\n      setpersonalInfo({\n        users: dataReturn.data.results,\n        filteredUsers: dataReturn.data.results,\n      });\n    });\n  }, []);\n  const inputChange = (e) => {\n    const filter = e.target.value;\n    const tempUserState = personInfo.users;\n    const filteredList = personInfo.users.filter((item) => {\n      let values = Object.values(item).join(\"\").toLowerCase();\n      return values.indexOf(filter.toLowerCase()) !== -1;\n    });\n    setpersonalInfo({ filteredUsers: filteredList, users: tempUserState });\n  };\n  const headings = [\n    {\n      name: \"Image\",\n      width: \"10%\",\n    },\n    { name: \"Name\", width: \"10%\" },\n    { name: \"Phone\", width: \"20%\"},\n    {name: \"Email\", width: \"20%\"},\n    {name: \"DOB\", width: \"10%\"}\n  ];\n  return (\n    <div>\n      <Nav inputChange={inputChange} />\n      <table>\n        <thead>\n          <tr>\n              {headings.map(({name, width}) => {\n                  return (\n                      <th key={name}>\n                          {name}\n                      </th>\n                  )\n              })}\n          </tr>\n        </thead>\n        <tbody>\n            {personInfo.users[0] !== undefined && personInfo.users[0].name !== undefined ? (\n                personInfo.filteredUsers.map(({login, name, picture, phone, email, dob}) => {\n                    return (\n                        <tr key = {login.uuid}>\n                            <td data-th = \"image\">\n                                <img src={picture.medium} />\n                            </td>\n                            <td>\n                                {name.first} {name.last}\n                            </td>\n                            <td>\n                                {phone}\n                            </td>\n                            <td>\n                                {email}\n                            </td>\n                            <td>\n                                {dob.date}\n                            </td>\n                        </tr>\n                    )\n                })\n            ): (<></>)}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default DataArea;\n","import React from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n\nconst Jumbo = (props) => {\n  return (\n    <div>\n      <Jumbotron fluid>\n        <Container fluid>\n          <h1 className=\"display-3\">Fluid jumbotron</h1>\n          <p className=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Jumbo;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DataArea from './components/dataArea';\nimport Jumbotron from './components/jumbotron';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbotron />\n      <DataArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}